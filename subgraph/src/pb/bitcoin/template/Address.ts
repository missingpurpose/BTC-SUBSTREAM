// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Transaction } from "./Transaction";

export class Address {
  static encode(message: Address, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.id);

    writer.uint32(16);
    writer.int64(message.balance);

    const transactions = message.transactions;
    for (let i: i32 = 0; i < transactions.length; ++i) {
      writer.uint32(26);
      writer.fork();
      Transaction.encode(transactions[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Address {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Address();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = reader.string();
          break;

        case 2:
          message.balance = reader.int64();
          break;

        case 3:
          message.transactions.push(
            Transaction.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  id: string;
  balance: i64;
  transactions: Array<Transaction>;

  constructor(
    id: string = "",
    balance: i64 = 0,
    transactions: Array<Transaction> = []
  ) {
    this.id = id;
    this.balance = balance;
    this.transactions = transactions;
  }
}
