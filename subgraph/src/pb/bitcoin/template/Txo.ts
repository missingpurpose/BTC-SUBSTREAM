// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Address } from "./Address";
import { Transaction } from "./Transaction";

export class Txo {
  static encode(message: Txo, writer: Writer): void {
    writer.uint32(8);
    writer.int64(message.txoCount);

    const addresses = message.addresses;
    for (let i: i32 = 0; i < addresses.length; ++i) {
      writer.uint32(18);
      writer.fork();
      Address.encode(addresses[i], writer);
      writer.ldelim();
    }

    const transactions = message.transactions;
    for (let i: i32 = 0; i < transactions.length; ++i) {
      writer.uint32(26);
      writer.fork();
      Transaction.encode(transactions[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Txo {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Txo();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.txoCount = reader.int64();
          break;

        case 2:
          message.addresses.push(Address.decode(reader, reader.uint32()));
          break;

        case 3:
          message.transactions.push(
            Transaction.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  txoCount: i64;
  addresses: Array<Address>;
  transactions: Array<Transaction>;

  constructor(
    txoCount: i64 = 0,
    addresses: Array<Address> = [],
    transactions: Array<Transaction> = []
  ) {
    this.txoCount = txoCount;
    this.addresses = addresses;
    this.transactions = transactions;
  }
}
